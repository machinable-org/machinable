import{_ as s,o as a,c as e,O as n}from"./chunks/framework.62020867.js";const A=JSON.parse('{"title":"Command-line interface","description":"","frontmatter":{},"headers":[],"relativePath":"guide/cli.md","filePath":"guide/cli.md"}'),o={name:"guide/cli.md"},l=n(`<h1 id="command-line-interface" tabindex="-1">Command-line interface <a class="header-anchor" href="#command-line-interface" aria-label="Permalink to &quot;Command-line interface&quot;">​</a></h1><p>Components can be launched directly from the command-line. The CLI works out of the box and closely mirrors the Python interface. To run a component, type its module name and method name, optionally followed by the configuration options, for example:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">machinable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mnist_data</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">batch_size=</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--launch</span></span></code></pre></div><p>To use multiprocessing, you may type:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">machinable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mnist_data</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">batch_size=</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">multiprocess</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">processes=</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--launch</span></span></code></pre></div><h3 id="creating-aliases" tabindex="-1">Creating aliases <a class="header-anchor" href="#creating-aliases" aria-label="Permalink to &quot;Creating aliases&quot;">​</a></h3><p>Generally, your command lines will likely look like the following:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">PYTHONPATH</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">.:</span><span style="color:#A6ACCD;">$PYTHONPATH </span><span style="color:#FFCB6B;">machinable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">machinable.index</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">directory=</span><span style="color:#A6ACCD;">$STORAGE </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">interfaces</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">her</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>This specifies to save and load results in the <code>$STORAGE</code> directory and it&#39;s useful to add an alias for this to your <code>.bashrc</code>:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ma</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> PYTHONPATH</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">.:</span><span style="color:#A6ACCD;">$PYTHONPATH </span><span style="color:#FFCB6B;">machinable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">machinable.index</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">directory=</span><span style="color:#A6ACCD;">$STORAGE </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;font-style:italic;">$@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>so you can type</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ma</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">interfaces</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">her</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Note that <code>.&lt;path&gt;</code> is a shorthand for <code>interface.&lt;path&gt;</code>, e.g. typing <code>interface.example</code> is equivalent to <code>.example</code>.</p>`,13),t=[l];function p(c,r,i,C,y,d){return a(),e("div",null,t)}const h=s(o,[["render",p]]);export{A as __pageData,h as default};
