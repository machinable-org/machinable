import{_ as o,D as l,o as e,c as p,z as n,a as s,G as t,B as c,O as r}from"./chunks/framework.62020867.js";const x=JSON.parse('{"title":"Execution","description":"","frontmatter":{},"headers":[],"relativePath":"guide/execution.md","filePath":"guide/execution.md"}'),i={name:"guide/execution.md"},y=n("h1",{id:"execution",tabindex:"-1"},[s("Execution "),n("a",{class:"header-anchor",href:"#execution","aria-label":'Permalink to "Execution"'},"â€‹")],-1),F=n("p",null,"Components can be executed in different ways. You may, for example, like to run components using multiprocessing or execute in a cloud environment. However, instead of adding the execution logic directly to your component code, machinable makes it easy to separate concerns. You can encapsulate the execution implementation in its own execution class that can then be used to execute the component.",-1),D=r(`<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-gewE5" id="tab-H-MAZql" checked="checked"><label for="tab-H-MAZql">multiprocess.py</label></div><div class="blocks"><div class="language-python active"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> multiprocessing </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Pool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Execution</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Multiprocess</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Execution</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    Config </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">processes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__call__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        pool </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Pool</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">processes</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">processes</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">maxtasksperchild</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">imap_unordered</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#C792EA;">lambda</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">component</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> component</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispatch</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">pending_executables</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">terminate</span><span style="color:#89DDFF;">()</span></span></code></pre></div></div></div><p>Much like a component, the execution class implements multiprocessing of the given <code>self.pending_executables</code> by dispatching them within a subprocess (<code>component.dispatch()</code>).</p><p>As usual, we can instantiate this execution using the module convention:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">multiprocess </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">multiprocess</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">processes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">})</span></span></code></pre></div><p>Then, to use it, we can wrap the launch in the execution context:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> multiprocessing</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    mnist</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">launch</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>Check out the <a href="./../examples/">execution examples</a> that include generally useful implementations you may like to use in your projects.</p>`,7);function A(u,C,d,m,h,f){const a=l("Pydoc");return e(),p("div",null,[y,F,n("p",null,[s("To implement an execution, implement an interface that inherits from the "),t(a,null,{default:c(()=>[s("machinable.Execution")]),_:1}),s(" base class, for example:")]),D])}const g=o(i,[["render",A]]);export{x as __pageData,g as default};
