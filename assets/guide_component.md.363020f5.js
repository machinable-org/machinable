import{_ as p,D as t,o as c,c as r,z as n,a as s,G as o,B as l,O as e}from"./chunks/framework.62020867.js";const b=JSON.parse('{"title":"Component","description":"","frontmatter":{},"headers":[],"relativePath":"guide/component.md","filePath":"guide/component.md"}'),i={name:"guide/component.md"},y=n("h1",{id:"component",tabindex:"-1"},[s("Component "),n("a",{class:"header-anchor",href:"#component","aria-label":'Permalink to "Component"'},"​")],-1),D=e(`<p>Consider the following example where we implement a preprocessing step to download a dataset:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Component</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MnistData</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">A dataset of handwritten characters</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  Config </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">batch_size</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mnist</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__call__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">download_data</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">local_directory</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">download_data</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dataset_name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">target_directory</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Downloading &#39;</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">dataset_name</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&#39; ...&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><h2 id="executing-components" tabindex="-1">Executing components <a class="header-anchor" href="#executing-components" aria-label="Permalink to &quot;Executing components&quot;">​</a></h2>`,3),F=e(`<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> mnist </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mnist_data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">batch_size</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> mnist</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">launch</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">Downloading </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mnist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> ...</span></span></code></pre></div><p>If the execution is successful, the component is marked as finished.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> mnist</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">execution</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is_finished</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">True</span></span></code></pre></div><p>By design, component instances can only be executed once. They are automatically assigned a timestamp, random seed, as well as a nickname for easy identification.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> mnist</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">seed</span></span>
<span class="line"><span style="color:#F78C6C;">1632827863</span></span></code></pre></div><p>Invocations of <code>launch()</code> after successful execution, do not trigger another execution since the component is marked as cached. On the other hand, if the execution failed, calling <code>launch()</code> will resume the execution with the same configuration.</p><h2 id="implementing-custom-execution" tabindex="-1">Implementing custom execution <a class="header-anchor" href="#implementing-custom-execution" aria-label="Permalink to &quot;Implementing custom execution&quot;">​</a></h2><p>Components can be executed in different ways. You may, for example, like to run components using multiprocessing or execute in a cloud environment. However, instead of adding the execution logic directly to your component code, machinable makes it easy to separate concerns. You can encapsulate the execution implementation in its own execution class that can then be used to execute the component.</p>`,8),C=e(`<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Bn7K9" id="tab-1U0l8Lc" checked="checked"><label for="tab-1U0l8Lc">multiprocess.py</label></div><div class="blocks"><div class="language-python active"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> multiprocessing </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Pool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Execution</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Multiprocess</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Execution</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    Config </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">processes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__call__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        pool </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Pool</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">processes</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">processes</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">maxtasksperchild</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">imap_unordered</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#C792EA;">lambda</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">component</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> component</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispatch</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">pending_executables</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            pool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">terminate</span><span style="color:#89DDFF;">()</span></span></code></pre></div></div></div><p>Much like a component, the execution class implements multiprocessing of the given <code>self.pending_executables</code> by dispatching them within a subprocess (<code>component.dispatch()</code>).</p><p>As usual, we can instantiate this execution using the module convention:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">multiprocess </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">multiprocess</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">processes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">})</span></span></code></pre></div><p>Then, to use it, we can wrap the launch in the execution context:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> multiprocessing</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    mnist</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">launch</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>Check out the <a href="./../examples/">execution examples</a> that include generally useful implementations you may like to use in your projects.</p><h2 id="using-the-cli" tabindex="-1">Using the CLI <a class="header-anchor" href="#using-the-cli" aria-label="Permalink to &quot;Using the CLI&quot;">​</a></h2><p>Components can be launched directly from the command-line. The CLI works out of the box and closely mirrors the Python interface. To run a component, type its module name and method name, optionally followed by the configuration options, for example:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">machinable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mnist_data</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">batch_size=</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--launch</span></span></code></pre></div><p>To use multiprocessing, you may type:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">machinable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mnist_data</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">batch_size=</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">multiprocess</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">processes=</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--launch</span></span></code></pre></div>`,12);function A(d,m,u,h,g,f){const a=t("Pydoc");return c(),r("div",null,[y,n("p",null,[s("While interfaces are designed to associate data with code, "),o(a,{caption:"components"},{default:l(()=>[s("machinable.Component")]),_:1}),s(" are the special case that allows for execution.")]),D,n("p",null,[s("Once implemented and configured, components can be executed by calling "),o(a,{caption:"launch()"},{default:l(()=>[s("machinable.Component.launch")]),_:1}),s(":")]),F,n("p",null,[s("To implement an execution, implement an interface that inherits from the "),o(a,null,{default:l(()=>[s("machinable.Execution")]),_:1}),s(" base class, for example:")]),C])}const x=p(i,[["render",A]]);export{b as __pageData,x as default};
