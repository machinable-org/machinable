import{_ as t,o as p,c as r,b as a,d as s,e as l,w as e,a as o,r as c}from"./app.d317d5a7.js";const k=JSON.parse('{"title":"Storage and retrieval","description":"","frontmatter":{"next":"Continue with the tutorial"},"headers":[{"level":2,"title":"Configuring the storage","slug":"configuring-the-storage","link":"#configuring-the-storage","children":[]},{"level":2,"title":"Saving and loading data","slug":"saving-and-loading-data","link":"#saving-and-loading-data","children":[{"level":3,"title":"Records","slug":"records","link":"#records","children":[]}]},{"level":2,"title":"Organize using groups","slug":"organize-using-groups","link":"#organize-using-groups","children":[]},{"level":2,"title":"Advanced search","slug":"advanced-search","link":"#advanced-search","children":[]}],"relativePath":"tutorial/essentials/storage-and-retrieval.md"}'),i={name:"tutorial/essentials/storage-and-retrieval.md"},y=o(`<h1 id="storage-and-retrieval" tabindex="-1">Storage and retrieval <a class="header-anchor" href="#storage-and-retrieval" aria-hidden="true">#</a></h1><p>When you execute experiments, information like the used configuration, the used random seed, etc. are automatically captured and stored.</p><p>One of the fundamental ideas in the design of machinable&#39;s storage is that it allows to retrieve results through the same abstraction that was used to create them. What does this look like for an experiment? Consider the example experiment that computes a gravity estimation of an exoplanet.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">gravity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">time_dilation</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span></code></pre></div>`,4),F=a("code",null,"estimate_gravity",-1),D=a("code",null,"time_dilation",-1),d=a("code",null,"2.0",-1),A=a("code",null,"estimate_gravity",-1),g=a("code",null,"time_dilation=2.0",-1),h=o(`<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">gravity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">time_dilation</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is_finished</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">An experiment with this configuration was not found</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;The gravity for a time dilation of 0.5 is </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">result</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>By default, the experiment data is stored in a local folder at <code>./storage/{experiment_id}</code> (e.g. <code>./storage/MHCYZq</code>).</p><h2 id="configuring-the-storage" tabindex="-1">Configuring the storage <a class="header-anchor" href="#configuring-the-storage" aria-hidden="true">#</a></h2><p>Just like with experiments and execution, you can choose the storage implementation and configuration using the module convention:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">storage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">machinable.storage.filesystem</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">directory</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./my-storage</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">})</span></span>
<span class="line"></span></code></pre></div>`,5),C=a("code",null,"machinable.storage.filesystem",-1),u=o(`<p>To use the storage, wrap the relevant code in a with-context:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> storage</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">launch</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># or alternatively</span></span>
<span class="line"><span style="color:#A6ACCD;">storage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">__enter__</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">launch</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><p>Experiments within the context will be written to the specified directory <code>./my-storage</code>. You are free to use or implement alternative storage that may upload files to the cloud or into a database.</p><h2 id="saving-and-loading-data" tabindex="-1">Saving and loading data <a class="header-anchor" href="#saving-and-loading-data" aria-hidden="true">#</a></h2>`,4),m=o(`<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save_data</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prediction.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;font-style:italic;"># text</span></span>
<span class="line"><span style="color:#A6ACCD;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save_data</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">settings.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">neurons</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]})</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># jsonable</span></span>
<span class="line"><span style="color:#A6ACCD;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save_data</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">inputs.npy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> np</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">array</span><span style="color:#89DDFF;">([</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">]))</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;"># numpy</span></span>
<span class="line"><span style="color:#A6ACCD;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save_data</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">results.p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> results</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">                   </span><span style="color:#676E95;font-style:italic;"># pickled</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load_data</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prediction.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">a string</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="records" tabindex="-1">Records <a class="header-anchor" href="#records" aria-hidden="true">#</a></h3><p>Experiments also provide an interface for tabular logging, that is, storing recurring data points for different iterations.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">record </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> iteration </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    record</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">iteration</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> iteration</span></span>
<span class="line"><span style="color:#A6ACCD;">    record</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">accuracy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># save at the end of the iteration to start a new row</span></span>
<span class="line"><span style="color:#A6ACCD;">    record</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><p>The results become available as a table where each row represents an iteration.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">&gt;&gt;&gt; gravity.records().as_table()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><table><tbody><tr><td>2022-10-07T23:05:46.942295-05:00</td><td style="text-align:right;">0.1</td><td style="text-align:right;">0</td></tr><tr><td>2022-10-07T23:05:46.944064-05:00</td><td style="text-align:right;">0.1</td><td style="text-align:right;">1</td></tr><tr><td>2022-10-07T23:05:46.946012-05:00</td><td style="text-align:right;">0.1</td><td style="text-align:right;">2</td></tr></tbody></table><h2 id="organize-using-groups" tabindex="-1">Organize using groups <a class="header-anchor" href="#organize-using-groups" aria-hidden="true">#</a></h2><p>To keep things organized, you can group experiments that belong together, for example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">experiment </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group_as</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lab-reports/%Y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiment</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">group</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">Group [lab-reports/2023]</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When specifying groups, you can use the common <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes" target="_blank" rel="noreferrer">time format codes</a> like <code>%Y</code> for the year provided by <a href="https://docs.python.org/3/library/datetime.html#datetime.date.strftime" target="_blank" rel="noreferrer">datetime.date.strftime</a>.</p></div><p>You may also specify a global default group that will be used if no group is set.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">machinable.storage.filesystem</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">directory</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./my-storage</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#A6ACCD;font-style:italic;">default_group</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lab-reports/%Y</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">__enter__</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The pre-configured default group is <code>%Y_%U_%a</code>, e.g. <code>2022_40_Sun</code></p></div><h2 id="advanced-search" tabindex="-1">Advanced search <a class="header-anchor" href="#advanced-search" aria-hidden="true">#</a></h2><p>machinable does not determine what interface you may like to use to query and search experiments. You can implement your custom storage search routines and resort to third-party UIs or libraries that suit your needs.</p><p>To illustrate this, let&#39;s leverage the library <a href="https://github.com/EntilZha/PyFunctional" target="_blank" rel="noreferrer">PyFunctional</a> to search our storage.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Storage</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> storage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Storage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> storage</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">FilesystemStorage &lt;./storage&gt;</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>The filesystem storage provides an SQlite database which we can use as a data source:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> storage</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sqlite_file</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">./storage/storage.sqlite</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> functional </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> seq</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> functools </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> partial</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> query </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">partial</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">seq</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sqlite3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> storage</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sqlite_file</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>This allows us to run arbitrary SQL queries like retrieving the 3 most recent experiments:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> recent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SELECT * FROM experiments ORDER BY timestamp LIMIT 3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">map</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">lambda</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> x</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> recent</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./storage/oPqe2v</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./storage/HGtHQu</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./storage/HwVO9l</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>Once we find what we are looking for we can always convert back to the regular machinable abstractions using <code>from_storage</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Experiment</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiments </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> recent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">Experiment</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">from_storage</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">to_list</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiments</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Experiment </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">oPqe2v</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> Experiment </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">HGtHQu</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> Experiment </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">HwVO9l</span><span style="color:#89DDFF;">]]</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiments</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">finished_at</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">humanize</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">a month ago</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>Overall, this should allow for a seamless conversion and integration of your preferred experiment management tools.</p><div class="info custom-block"><p class="custom-block-title">🧑‍🎓</p><p>This concludes the overview of the most essential features. You can refer back to individual chapters at any time or continue with the <a href="./../elements-in-depth/overview.html">advanced tutorial sections</a>, the <a href="./../../reference/">API reference</a> and the <a href="./../../examples/overview.html">examples</a>.</p></div>`,26);function f(_,v,b,x,E,w){const n=c("Pydoc");return p(),r("div",null,[y,a("p",null,[s("Here, "),l(n,{caption:"get()"},{default:e(()=>[s("machinable.get")]),_:1}),s(" will automatically search the storage for an experiment of type "),F,s(" with a "),D,s(" of "),d,s(". If "),A,s(" has not been executed with this exact configuration, a new instance of the experiment with "),g,s(" is returned instead. This means that we can easily retrieve experiments with the same command we initially used to execute them. Consider the following example:")]),h,a("p",null,[s("This will instantiate the "),l(n,null,{default:e(()=>[s("machinable.Storage")]),_:1}),s(" implementation that is located in the "),C,s(" module, namely the default storage that writes all data to a local directory.")]),u,a("p",null,[s("While machinable automatically stores crucial information about the experiment, you can use "),l(n,null,{default:e(()=>[s("machinable.Experiment.save_data")]),_:1}),s(" and "),l(n,null,{default:e(()=>[s("machinable.Experiment.load_data")]),_:1}),s(" to easily store and retrieve additional custom data in different file formats:")]),m])}const S=t(i,[["render",f]]);export{k as __pageData,S as default};
