import{_ as l,o as t,c as p,a as e,b as s,d as a,w as o,e as c,r}from"./app.fd76f650.js";const b=JSON.parse('{"title":"Running experiments","description":"","frontmatter":{},"headers":[{"level":2,"title":"Executing experiments","slug":"executing-experiments","link":"#executing-experiments","children":[]},{"level":2,"title":"Reproducibility","slug":"reproducibility","link":"#reproducibility","children":[]},{"level":2,"title":"Modes of execution","slug":"modes-of-execution","link":"#modes-of-execution","children":[]}],"relativePath":"tutorial/essentials/running-experiments.md"}'),i={name:"tutorial/essentials/running-experiments.md"},F=e("h1",{id:"running-experiments",tabindex:"-1"},[s("Running experiments "),e("a",{class:"header-anchor",href:"#running-experiments","aria-hidden":"true"},"#")],-1),y=e("h2",{id:"executing-experiments",tabindex:"-1"},[s("Executing experiments "),e("a",{class:"header-anchor",href:"#executing-experiments","aria-hidden":"true"},"#")],-1),D=c(`<div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Experiment</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiment </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instance</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">Assuming height of </span><span style="color:#F78C6C;">52</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> time of </span><span style="color:#F78C6C;">0.3</span></span>
<span class="line"><span style="color:#A6ACCD;">The gravity on the exoplanet </span><span style="color:#89DDFF;">is</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">1155.5555555555557</span></span>
<span class="line"></span></code></pre></div><p>If the execution is successful, the experiment is marked as finished.</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is_finished</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">True</span></span>
<span class="line"></span></code></pre></div><h2 id="reproducibility" tabindex="-1">Reproducibility <a class="header-anchor" href="#reproducibility" aria-hidden="true">#</a></h2><p>By design, experiment instances can only be executed once. There are automatically assigned a unique experiment ID, a random seed as well as a nickname for easy identification.</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instance</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">experiment_id</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;">GDCN4d</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nickname</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;">jet_oak</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">seed</span></span>
<span class="line"><span style="color:#F78C6C;">1632827863</span></span>
<span class="line"></span></code></pre></div><p>Repeated invocations of <code>execute()</code> after the initial execution, are simply ignored. On the other hand, if an execution failed, calling <code>execute()</code> will resume the execution with the same random seed.</p><p>To replicate or reproduce a experiment, create a new experiment instance with the same configuration. Learn more about <a href="./../elements-in-depth/experiments.html#derivation">continuing and repeating experiments</a>.</p><h2 id="modes-of-execution" tabindex="-1">Modes of execution <a class="header-anchor" href="#modes-of-execution" aria-hidden="true">#</a></h2><p>Experiment may be executed in different ways.</p><p>For example, instead of the default single-threaded execution, you may like to run your experiment isolated using multiprocessing:</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#A6ACCD;">experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">machinable.execution.local</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">processes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span></code></pre></div><p>Execution on <a href="https://slurm.schedmd.com/documentation.html" target="_blank" rel="noreferrer">Slurm</a> can be as simple as:</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#A6ACCD;">experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">machinable.execution.slurm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>Or delegating the execution to an external runner like <a href="https://www.open-mpi.org/" target="_blank" rel="noreferrer">MPI</a> may look like this:</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#A6ACCD;">experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">machinable.execution.external</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">runner</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mpi</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">})</span></span>
<span class="line"></span></code></pre></div>`,16),d=e("code",null,"execute()",-1),u=e("p",null,[s("Check out the "),e("a",{href:"./../../reference/"},"reference documentation"),s(" for available execution modes. You may also be interested in implementing a "),e("a",{href:"./../elements-in-depth/execution.html"},"custom execution"),s(".")],-1);function m(h,x,g,A,C,f){const n=r("Pydoc");return t(),p("div",null,[F,y,e("p",null,[s("Once implemented and configured, experiments can be executed by calling "),a(n,{caption:"execute()"},{default:o(()=>[s("machinable.Experiment.execute")]),_:1}),s(":")]),D,e("p",null,[s("You may have noticed that "),d,s(" follows the same convention as "),a(n,null,{default:o(()=>[s("machinable.Experiment.instance")]),_:1}),s(" to specify and load executions by their module name and an optional dictionary with configuration options. In fact, the execution modes are implemented just like experiments, but derive from the "),a(n,null,{default:o(()=>[s("machinable.Execution")]),_:1}),s(" base class.")]),u])}const v=l(i,[["render",m]]);export{b as __pageData,v as default};
