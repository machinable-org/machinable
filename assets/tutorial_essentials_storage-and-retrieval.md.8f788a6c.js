import{_ as t,o as p,c as r,a,b as s,d as e,w as l,e as o,r as c}from"./app.a6029ded.js";const k=JSON.parse('{"title":"Storage and retrieval","description":"","frontmatter":{},"headers":[{"level":2,"title":"Configuring the storage","slug":"configuring-the-storage","link":"#configuring-the-storage","children":[]},{"level":2,"title":"Organize using groups","slug":"organize-using-groups","link":"#organize-using-groups","children":[]},{"level":2,"title":"Saving and loading data","slug":"saving-and-loading-data","link":"#saving-and-loading-data","children":[{"level":3,"title":"Records","slug":"records","link":"#records","children":[]}]},{"level":2,"title":"Retriving experiments","slug":"retriving-experiments","link":"#retriving-experiments","children":[]},{"level":2,"title":"Singletons","slug":"singletons","link":"#singletons","children":[]}],"relativePath":"tutorial/essentials/storage-and-retrieval.md"}'),i={name:"tutorial/essentials/storage-and-retrieval.md"},F=o(`<h1 id="storage-and-retrieval" tabindex="-1">Storage and retrieval <a class="header-anchor" href="#storage-and-retrieval" aria-hidden="true">#</a></h1><p>When you execute experiments, information like the used configuration, the used random seed, etc. are automatically captured and stored. By default, the data is stored in a local folder at <code>./storage/%Y_%U_%a/{experiment_id}</code> (e.g. <code>./storage/2022_40_Sun/MHCYZq</code>).</p><h2 id="configuring-the-storage" tabindex="-1">Configuring the storage <a class="header-anchor" href="#configuring-the-storage" aria-hidden="true">#</a></h2><p>Just like with experiments and execution, you can choose the storage implementation and configuration using the module convention:</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Storage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">storage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Storage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instance</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">machinable.storage.filesystem</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">directory</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./my-storage</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">})</span></span>
<span class="line"></span></code></pre></div>`,5),D=a("code",null,"machinable.storage.filesystem",-1),y=o(`<p>To use the storage, call the <code>connect()</code> method:</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#A6ACCD;">storage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><p>Experiments will now be written to the specified directory.</p><h2 id="organize-using-groups" tabindex="-1">Organize using groups <a class="header-anchor" href="#organize-using-groups" aria-hidden="true">#</a></h2><p>To keep things organized, you can group experiments that belong together, for example:</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Experiment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">gravity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instance</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group_as</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">%Y/lab-reports</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">local_directory</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span></code></pre></div><p><code>./storage/2022/lab-reports-tjMFXt</code></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When specifying groups, you can use the common <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes" target="_blank" rel="noreferrer">time format codes</a> like <code>%Y</code> for the year provided by <a href="https://docs.python.org/3/library/datetime.html#datetime.date.strftime" target="_blank" rel="noreferrer">datetime.date.strftime</a>.</p></div><p>You may also specify a global default group that will be used if no group is set.</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Storage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Storage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">machinable.storage.filesystem</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">directory</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./my-storage</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#A6ACCD;">default_group</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">%Y/lab-reports</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The preconfigured default group is <code>%Y_%U_%a</code>, e.g. <code>2022_40_Sun</code></p></div><h2 id="saving-and-loading-data" tabindex="-1">Saving and loading data <a class="header-anchor" href="#saving-and-loading-data" aria-hidden="true">#</a></h2>`,12),d=o(`<div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#A6ACCD;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save_data</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prediction.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;"># text</span></span>
<span class="line"><span style="color:#A6ACCD;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save_data</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">settings.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">neurons</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]})</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;"># jsonable</span></span>
<span class="line"><span style="color:#A6ACCD;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save_data</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">inputs.npy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> np</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">array</span><span style="color:#89DDFF;">([</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">]))</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;"># numpy</span></span>
<span class="line"><span style="color:#A6ACCD;">gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save_data</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">results.p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> results</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">                   </span><span style="color:#676E95;"># pickled</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load_data</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prediction.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;">a string</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="records" tabindex="-1">Records <a class="header-anchor" href="#records" aria-hidden="true">#</a></h3><p>Experiments also provide an interface for tabular logging, that is, storing recurring data points for different iterations.</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#A6ACCD;">record </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> iteration </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    record</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">iteration</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> iteration</span></span>
<span class="line"><span style="color:#A6ACCD;">    record</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">accuracy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;"># save at the end of the iteration to start a new row</span></span>
<span class="line"><span style="color:#A6ACCD;">    record</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><p>The results become available as a table where each row represents an iteration.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">&gt;&gt;&gt; gravity.records().as_table()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><table><tbody><tr><td>2022-10-07T23:05:46.942295-05:00</td><td style="text-align:right;">0.1</td><td style="text-align:right;">0</td></tr><tr><td>2022-10-07T23:05:46.944064-05:00</td><td style="text-align:right;">0.1</td><td style="text-align:right;">1</td></tr><tr><td>2022-10-07T23:05:46.946012-05:00</td><td style="text-align:right;">0.1</td><td style="text-align:right;">2</td></tr><tr><td>2022-10-07T23:05:46.947686-05:00</td><td style="text-align:right;">0.1</td><td style="text-align:right;">3</td></tr></tbody></table><h2 id="retriving-experiments" tabindex="-1">Retriving experiments <a class="header-anchor" href="#retriving-experiments" aria-hidden="true">#</a></h2><p>You can retrieve previously executed experiments from the connected storage using their unique experiment ID, for example:</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Experiment</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiment </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tjMFXt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">finished_at</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">humanize</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;">21 minutes ago</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="singletons" tabindex="-1">Singletons <a class="header-anchor" href="#singletons" aria-hidden="true">#</a></h2>`,11),g=o(`<div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Experiment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">gravity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">singleton</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">time_dilation</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span></code></pre></div>`,1),A=a("code",null,"estimate_gravity",-1),h=a("code",null,"time_dilation",-1),u=a("code",null,"2.0",-1),C=a("code",null,"estimate_gravity",-1),m=a("code",null,"time_dilation=2.0",-1),_=a("p",null,[s("This feature is crucially important for machinable's "),a("a",{href:"./unified-representation.html"},"unified representation"),s(" which we will discuss next.")],-1);function f(v,b,x,E,T,S){const n=c("Pydoc");return p(),r("div",null,[F,a("p",null,[s("This will instantiate the "),e(n,null,{default:l(()=>[s("machinable.Storage")]),_:1}),s(" implementation located in the "),D,s(" module.")]),y,a("p",null,[s("While machinable automatically stores crucial information about the experiment, you can use "),e(n,null,{default:l(()=>[s("machinable.Experiment.save_data")]),_:1}),s(" and "),e(n,null,{default:l(()=>[s("machinable.Experiment.load_data")]),_:1}),s(" to easily store and retrieve additional custom data in different file formats:")]),d,a("p",null,[s("Alternatively, and perhaps more importantly, you can look up experiments in a way that mirrors their original instantiation using "),e(n,null,{default:l(()=>[s("machinable.Experiment.singleton")]),_:1}),s(".")]),g,e(n,{caption:"singleton()"},{default:l(()=>[s("machinable.Experiment.singleton")]),_:1}),s(" will search and return an experiment of type "),A,s(" with a "),h,s(" of "),u,s(". If "),C,s(" has not been executed with that exact configuration, a new instance of the experiment with "),m,s(" is returned instead."),_])}const P=t(i,[["render",f]]);export{k as __pageData,P as default};
