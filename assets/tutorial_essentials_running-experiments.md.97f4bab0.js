import{_ as l,o as p,c as i,a as n,b as e,d as a,w as t,e as o,r as c}from"./app.277ebe78.js";const v=JSON.parse('{"title":"Running experiments","description":"","frontmatter":{},"headers":[{"level":2,"title":"Executing experiments","slug":"executing-experiments","link":"#executing-experiments","children":[]},{"level":2,"title":"Reproducibility","slug":"reproducibility","link":"#reproducibility","children":[]},{"level":2,"title":"Execution implementations","slug":"execution-implementations","link":"#execution-implementations","children":[]}],"relativePath":"tutorial/essentials/running-experiments.md"}'),r={name:"tutorial/essentials/running-experiments.md"},y=n("h1",{id:"running-experiments",tabindex:"-1"},[e("Running experiments "),n("a",{class:"header-anchor",href:"#running-experiments","aria-hidden":"true"},"#")],-1),u=n("h2",{id:"executing-experiments",tabindex:"-1"},[e("Executing experiments "),n("a",{class:"header-anchor",href:"#executing-experiments","aria-hidden":"true"},"#")],-1),D=o(`<div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Experiment</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiment </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instance</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">Assuming height of </span><span style="color:#F78C6C;">52</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> time of </span><span style="color:#F78C6C;">0.3</span></span>
<span class="line"><span style="color:#A6ACCD;">The gravity on the exoplanet </span><span style="color:#89DDFF;">is</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">1155.5555555555557</span></span>
<span class="line"></span></code></pre></div><p>If the execution is successful, the experiment is marked as finished.</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is_finished</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">True</span></span>
<span class="line"></span></code></pre></div><h2 id="reproducibility" tabindex="-1">Reproducibility <a class="header-anchor" href="#reproducibility" aria-hidden="true">#</a></h2><p>By design, experiment instances can only be executed once. They are automatically assigned a unique experiment ID, a random seed, as well as a nickname for easy identification.</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instance</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">experiment_id</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;">GDCN4d</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nickname</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;">jet_oak</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">seed</span></span>
<span class="line"><span style="color:#F78C6C;">1632827863</span></span>
<span class="line"></span></code></pre></div><p>Repeated invocations of <code>execute()</code> after the initial execution, are simply ignored. On the other hand, if an execution failed, calling <code>execute()</code> will resume the execution with the same random seed.</p><p>To replicate or reproduce a experiment, create a new experiment instance with the same configuration. Learn more about <a href="./../elements-in-depth/experiments.html#derivation">continuing and repeating experiments</a>.</p><h2 id="execution-implementations" tabindex="-1">Execution implementations <a class="header-anchor" href="#execution-implementations" aria-hidden="true">#</a></h2>`,9),d=o(`<div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#A6ACCD;">experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myproject.execution.multiprocessing</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">processes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span></code></pre></div>`,1),F=n("code",null,"myproject.execution.multiprocessing",-1),m=n("p",null,[e("Check out the "),n("a",{href:"./../elements-in-depth/execution.html"},"execution guide"),e(" to learn more about executions. You may also be interested in the "),n("a",{href:"./../../examples/execution.html"},"execution examples"),e(" that you may like to use in your projects.")],-1);function h(x,g,C,_,A,f){const s=c("Pydoc");return p(),i("div",null,[y,u,n("p",null,[e("Once implemented and configured, experiments can be executed by calling "),a(s,{caption:"execute()"},{default:t(()=>[e("machinable.Experiment.execute")]),_:1}),e(":")]),D,n("p",null,[e("Experiments can be executed in different ways. You may, for example, like to run experiments using multiprocessing. To configure the execution, "),a(s,{caption:"execute()"},{default:t(()=>[e("machinable.Experiment.execute")]),_:1}),e(" adopts the same module convention as "),a(s,null,{default:t(()=>[e("machinable.Experiment.instance")]),_:1}),e(". You can specify the execution implementation that you like to use by its module name and optionally provide configuration options in form of a dictionary, for example:")]),d,n("p",null,[e("Just like in the case of experiments, this will instantiate a "),a(s,null,{default:t(()=>[e("machinable.Execution")]),_:1}),e(" class in the module "),F,e(" which will handle the execution.")]),m])}const E=l(r,[["render",h]]);export{v as __pageData,E as default};
