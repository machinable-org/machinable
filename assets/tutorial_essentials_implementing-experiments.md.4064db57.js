import{_ as p,c as t,a as l,b as s,e as a,w as e,d as o,r as c,o as r}from"./app.91c873b5.js";const _=JSON.parse('{"title":"Implementing experiments","description":"","frontmatter":{},"headers":[{"level":2,"title":"Events","slug":"events","link":"#events","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"Verify your implementation","slug":"verify-your-implementation","link":"#verify-your-implementation","children":[]}],"relativePath":"tutorial/essentials/implementing-experiments.md"}'),i={name:"tutorial/essentials/implementing-experiments.md"},y=o(`<h1 id="implementing-experiments" tabindex="-1">Implementing experiments <a class="header-anchor" href="#implementing-experiments" aria-hidden="true">#</a></h1><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h2><p>The experiments that we have created so far have been nothing more than an empty shell. Let&#39;s add an actual implementation:</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Experiment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EstimateGravity</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Experiment</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;&quot;&quot;</span><span style="color:#676E95;">An experiment to estimate gravity</span><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">on_execute</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">      height </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">52</span></span>
<span class="line"><span style="color:#A6ACCD;">      time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.3</span></span>
<span class="line"><span style="color:#A6ACCD;">      g </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> height </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> time </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The gravity on the exoplanet is: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> g</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div>`,4),D=l("code",null,"on_",-1),F=o(`<p>The event methods will be called automatically during the execution of the experiment, so you don&#39;t have to call them manually. Of course, you are free to add other methods or properties to your class if needed.</p><details class="details custom-block"><summary>How can I use existing code?</summary><p>If you have some existing code, you can call it from the experiment without any additional changes, for example:</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Experiment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> my_code </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> existing_implementation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EstimateGravity</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Experiment</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">on_execute</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;"># call into your existing code without any further changes</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">existing_implementation</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div></details><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h2><p>In the above example, we simply hardcoded the basic arguments of the algorithm. In practice, of course, experiments tend to have varying parameters, so let&#39;s make our parameters configurable.</p><p>We can define configuration options of the experiment using a <code>Config</code> dataclass:</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> dataclasses </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> dataclass</span></span>
<span class="line"><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Experiment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EstimateGravity</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Experiment</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;&quot;&quot;</span><span style="color:#676E95;">An experiment to estimate gravity</span><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">dataclass</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Config</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">52</span></span>
<span class="line"><span style="color:#A6ACCD;">      time</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">on_execute</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">      g </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">height</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">time</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The gravity on the exoplanet is: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> g</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>The parameter become available under <code>self.config</code> and can be accessed with object-notation (<code>self.config.my.value</code>) or dict-style access (<code>self.config[&#39;my&#39;][&#39;value&#39;]</code>).</p><p>The <code>Config</code> dataclass allows for many advanced features such as validation, parameter documentation, computed values and much more.</p><h2 id="verify-your-implementation" tabindex="-1">Verify your implementation <a class="header-anchor" href="#verify-your-implementation" aria-hidden="true">#</a></h2><p>Let&#39;s test the implementation.</p><div class="language-python"><button class="copy"></button><span class="lang">python</span><pre><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Experiment</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Experiment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instance</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">Experiment </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">8wqSsj</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> gravity</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">height</span></span>
<span class="line"><span style="color:#F78C6C;">52</span></span>
<span class="line"></span></code></pre></div>`,11);function C(A,m,d,h,u,g){const n=c("Pydoc");return r(),t("div",null,[y,l("p",null,[s("Here, we have placed our algorithm in the "),a(n,null,{default:e(()=>[s("machinable.Experiment.on_execute")]),_:1}),s(" method. The "),a(n,null,{default:e(()=>[s("machinable.Experiment")]),_:1}),s(" base class provides a variety of different lifecycle events (all starting with "),D,s("), such as "),a(n,null,{default:e(()=>[s("machinable.Experiment.on_create")]),_:1}),s(", "),a(n,null,{default:e(()=>[s("machinable.Experiment.on_success")]),_:1}),s(", etc.")]),F])}const v=p(i,[["render",C]]);export{_ as __pageData,v as default};
