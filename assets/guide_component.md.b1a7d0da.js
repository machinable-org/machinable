import{_ as p,D as t,o as c,c as r,z as n,a as s,G as o,B as l,O as e}from"./chunks/framework.62020867.js";const f=JSON.parse('{"title":"Component","description":"","frontmatter":{},"headers":[],"relativePath":"guide/component.md","filePath":"guide/component.md"}'),i={name:"guide/component.md"},y=n("h1",{id:"component",tabindex:"-1"},[s("Component "),n("a",{class:"header-anchor",href:"#component","aria-label":'Permalink to "Component"'},"​")],-1),D=e(`<p>Consider the following example where we implement a preprocessing step to download a dataset:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Component</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MnistData</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">A dataset of handwritten characters</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  Config </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">batch_size</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mnist</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__call__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">download_data</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">local_directory</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">download_data</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dataset_name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">target_directory</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Downloading &#39;</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">dataset_name</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&#39; ...&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><h2 id="executing-components" tabindex="-1">Executing components <a class="header-anchor" href="#executing-components" aria-label="Permalink to &quot;Executing components&quot;">​</a></h2>`,3),F=e(`<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> mnist </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mnist_data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">batch_size</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> mnist</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">launch</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">Downloading </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mnist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> ...</span></span></code></pre></div><p>If the execution is successful, the component is marked as finished.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> mnist</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">execution</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is_finished</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">True</span></span></code></pre></div><p>By design, component instances can only be executed once. They are automatically assigned a timestamp, random seed, as well as a nickname for easy identification.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> mnist</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">seed</span></span>
<span class="line"><span style="color:#F78C6C;">1632827863</span></span></code></pre></div><p>Invocations of <code>launch()</code> after successful execution, do not trigger another execution since the component is marked as cached. On the other hand, if the execution failed, calling <code>launch()</code> will resume the execution with the same configuration.</p>`,6);function C(A,d,m,h,u,_){const a=t("Pydoc");return c(),r("div",null,[y,n("p",null,[s("While interfaces are designed to associate data with code, "),o(a,{caption:"components"},{default:l(()=>[s("machinable.Component")]),_:1}),s(" are the special case that allows for execution.")]),D,n("p",null,[s("Once implemented and configured, components can be executed by calling "),o(a,{caption:"launch()"},{default:l(()=>[s("machinable.Component.launch")]),_:1}),s(":")]),F])}const b=p(i,[["render",C]]);export{f as __pageData,b as default};
