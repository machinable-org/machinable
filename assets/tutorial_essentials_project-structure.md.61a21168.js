import{_ as o,o as p,c as i,b as a,d as s,e as n,w as t,a as l,r}from"./app.27a6242c.js";const b=JSON.parse('{"title":"Project structure","description":"","frontmatter":{},"headers":[{"level":2,"title":"Creating experiments","slug":"creating-experiments","link":"#creating-experiments","children":[]},{"level":2,"title":"The module convention","slug":"the-module-convention","link":"#the-module-convention","children":[]},{"level":2,"title":"Verify your setup","slug":"verify-your-setup","link":"#verify-your-setup","children":[]}],"relativePath":"tutorial/essentials/project-structure.md"}'),c={name:"tutorial/essentials/project-structure.md"},y=a("h1",{id:"project-structure",tabindex:"-1"},[s("Project structure "),a("a",{class:"header-anchor",href:"#project-structure","aria-hidden":"true"},"#")],-1),u=a("h2",{id:"creating-experiments",tabindex:"-1"},[s("Creating experiments "),a("a",{class:"header-anchor",href:"#creating-experiments","aria-hidden":"true"},"#")],-1),m=a("em",null,"experiments",-1),D=l(`<p>For example, a basic experiment implementation might look like this:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Experiment  </span><span style="color:#676E95;font-style:italic;"># Experiment base class</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EstimateGravity</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Experiment</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">An experiment to estimate gravity</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="the-module-convention" tabindex="-1">The module convention <a class="header-anchor" href="#the-module-convention" aria-hidden="true">#</a></h2><p>The only hard constraint here is that each experiment must be placed in its own Python module. The project source code may for instance be organized like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">example_project/</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ estimate_gravity.py            # contains a data analysis experiment</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ evolution/                   </span></span>
<span class="line"><span style="color:#A6ACCD;">|  └─ simulate_offspring.py       # contains a evolutionary simulation</span></span>
<span class="line"><span style="color:#A6ACCD;">└─ main.py                        # main script to execute</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>One benefit of this requirement is that the names of the classes do not matter; we can directly refer to an experiment via the module import path.</p><p>For example, using this <em>module convention</em>, we can simplify the instantiation of the experiment classes. Consider how you would usually instantiate the classes:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># main.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> estimate_gravity </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> EstimateGravity</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> evolution</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">simulate_offspring </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> SimulateOffspring</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">gravity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EstimateGravity</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">evolution </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimulateOffspring</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div>`,8),h=l(`<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># main.py using machinable&#39;s module convention</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">gravity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">evolution </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">evolution.simulate_offspring</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>Note that we do not refer to the classes by their name but just by the modules that contain them. As we will see later, importing and instantiating experiments this way has a lot of advantages, so it is the default way of instantiation in machinable projects.</p><h2 id="verify-your-setup" tabindex="-1">Verify your setup <a class="header-anchor" href="#verify-your-setup" aria-hidden="true">#</a></h2><p>If you have structured your project correctly, you should be able to instantiate any of the experiment that you have created via their module name.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> machinable </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">__class__</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">estimate_gravity.EstimateGravity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,5);function d(F,C,A,g,f,_){const e=r("Pydoc");return p(),i("div",null,[y,u,a("p",null,[s("At a basic level, machinable projects are regular Python projects that implement "),m,s(". Think of an experiment as some code we would like to run to gain some insights, say a simulation of evolutionary biology or data analysis to estimate the gravity of an exoplanet. In machinable projects, such experiment code is implemented in classes that inherit from the "),n(e,null,{default:t(()=>[s("machinable.Experiment")]),_:1}),s(" base class.")]),D,a("p",null,[s("And here is the module-convention equivalent using "),n(e,null,{default:t(()=>[s("machinable.get")]),_:1}),s(":")]),h])}const x=o(c,[["render",d]]);export{b as __pageData,x as default};
